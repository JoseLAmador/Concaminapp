Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = '/home/jose/Escritorio/CONCAMIIIIIIIIN/Concaminapp/src/components/principal/PostsList.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactRedux = require('react-redux');

var _reactNative = require('react-native');

var _Card = require('./Card');

var _Card2 = _interopRequireDefault(_Card);

var _nativeBase = require('native-base');

var _postActions = require('../actions/postActions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    PostsList: {
        displayName: 'PostsList'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/home/jose/Escritorio/CONCAMIIIIIIIIN/Concaminapp/src/components/principal/PostsList.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var PostsList = _wrapComponent('PostsList')(function (_Component) {
    _inherits(PostsList, _Component);

    function PostsList() {
        _classCallCheck(this, PostsList);

        return _possibleConstructorReturn(this, (PostsList.__proto__ || Object.getPrototypeOf(PostsList)).apply(this, arguments));
    }

    _createClass(PostsList, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.props.postFetch();
        }
    }, {
        key: 'fetched',
        value: function fetched() {
            if (!this.props.fetched) {
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 15
                        }
                    },
                    _react3.default.createElement(_nativeBase.Spinner, { color: "#0097A7", __source: {
                            fileName: _jsxFileName,
                            lineNumber: 16
                        }
                    }),
                    _react3.default.createElement(
                        _reactNative.Text,
                        { style: { alignSelf: 'center' }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 17
                            }
                        },
                        'Cargando...'
                    )
                );
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var post = this.props.post;

            var filtrados = post.filter(function (f) {
                return !f.group && !f.organization;
            });
            return _react3.default.createElement(
                _nativeBase.Content,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 28
                    }
                },
                _react3.default.createElement(_reactNative.StatusBar, { backgroundColor: '#0097A7', barStyle: 'light-content', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 29
                    }
                }),
                this.fetched(),
                filtrados.reverse().map(function (post, index) {
                    return _react3.default.createElement(_Card2.default, {
                        key: index,
                        index: index,
                        post: post,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 32
                        }
                    });
                })
            );
        }
    }]);

    return PostsList;
}(_react2.Component));

;

var mapStateToProps = function mapStateToProps(state) {
    var post = _.map(state.post, function (val, uid) {
        return _extends({}, val, { uid: uid });
    });
    return { post: post, fetched: post.length > 0 };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, { postFetch: _postActions.postFetch })(PostsList);